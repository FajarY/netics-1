name: build-deploy-application
run-name: application-builder-deployer-${{ github.actor }}
on: [push]

env:
    DOTNET_SDK_VERSION: 8.x.x

jobs:
    build:
        environment: Production
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4
            - name: Setting up .NET ${{ env.DOTNET_SDK_VERSION }}
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
                cache: true
            - name: Setting up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Inserting Docker Hub Credentials
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_HUB_USERNAME }}
                password: ${{ secrets.DOCKER_HUB_PASSWORD }}
            - name: Fetching .env
              working-directory: ./App
              run: |
                echo "NAMA=${{ secrets.APP_NAMA }}" >> .env
                echo "NRP=${{ secrets.APP_NRP }}" >> .env
            - name: Installing dependencies
              working-directory: ./App
              run: dotnet restore --locked-mode
            - name: Compiling application
              working-directory: ./App
              run: ./compile.sh
            - name: Checking compiled application
              working-directory: ./Dockerfile/publish
              run: ls -al
            - name: Building docker image
              uses: docker/build-push-action@v6
              with:
                context: ./Dockerfile
                push: true
                tags: fajary/netics-1:latest
    deploy:
        environment: Production
        needs: build
        runs-on: ubuntu-22.04
        steps:
          - uses: actions/checkout@v4
          - name: Connecting to remote Home PC & Deploy
            working-directory: ./App
            run: |
              echo "${{ secrets.REMOTE_SSH_KEY }}" > Deploy.pem
              chmod 400 Deploy.pem
              cat run.sh | ssh -o "StrictHostKeyChecking no" -i Deploy.pem ${{ secrets.REMOTE_SSH_USERNAME }}@${{ secrets.REMOTE_SSH_HOST }} -p ${{ secrets.REMOTE_SSH_PORT }} /bin/bash
        